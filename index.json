[
{
	"uri": "/projects/spatial_mapping/",
	"title": "Spatial Mapping of Bushmeat Hunting",
	"tags": [],
	"description": "",
	"content": " Socially and ecologically sustaniable harvests ATLANTIC REDFISH Atlantic Canada has suffered socially and economically since the demise of the Northern Cod fisheries and its subsequent closure in the 1990s. The cod moratorium left fishers seeking alternative fish stocks - including redfish, a deep-dwelling, long-lived groundfish. Rarely is there good news in the world of commercial fisheries, but recent booms in the Gulf of St. Lawrence\u0026rsquo;s two redfish species - Sebastes fasciatus and Sebastes mentella - are encouraging, supposedly able to provide large catches for at least the next 20 years. However, until recently it was unclear how to manage this stock long-term, especially given its sporatic population dynamics.\nWorking with scientists from UBC and DFO, I helped develop and summarize a management strategy evaluation to aid DFO decision-makers in setting harvest rules for the fishery. Through ongoing meetings with fishery stakeholders, a management strategy evaluation was built and assessed with Bayesian decision tools to determine how to best manage the redfish stock in the face of considerable uncertainty. This ongoing project seeks to answer three questions:\n How should we measure the serious social, economic, and ecological outcomes of the redfish population boom? What are the most robust  MANGEMENT STRATEGY EVALUATION FOR STONES\u0026rsquo; SHEEP "
},
{
	"uri": "/post/test2/",
	"title": "Test 2",
	"tags": ["testing"],
	"description": "This is a test of the second post",
	"content": "Posted on 2019-05-22  Lorem Ipsum.\n"
},
{
	"uri": "/projects/simulations/redfish/",
	"title": "Canadian Atlantic Redfish",
	"tags": [],
	"description": "",
	"content": " In Hugo, pages are the core of your site. Once it is configured, pages are definitely the added value to your documentation site.\nFolders Organize your site like any other Hugo project. Typically, you will have a content folder with all your pages.\ncontent ├── level-one │ ├── level-two │ │ ├── level-three │ │ │ ├── level-four │ │ │ │ ├── _index.md \u0026lt;-- /level-one/level-two/level-three/level-four │ │ │ │ ├── page-4-a.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-a │ │ │ │ ├── page-4-b.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-b │ │ │ │ └── page-4-c.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-c │ │ │ ├── _index.md \u0026lt;-- /level-one/level-two/level-three │ │ │ ├── page-3-a.md \u0026lt;-- /level-one/level-two/level-three/page-3-a │ │ │ ├── page-3-b.md \u0026lt;-- /level-one/level-two/level-three/page-3-b │ │ │ └── page-3-c.md \u0026lt;-- /level-one/level-two/level-three/page-3-c │ │ ├── _index.md \u0026lt;-- /level-one/level-two │ │ ├── page-2-a.md \u0026lt;-- /level-one/level-two/page-2-a │ │ ├── page-2-b.md \u0026lt;-- /level-one/level-two/page-2-b │ │ └── page-2-c.md \u0026lt;-- /level-one/level-two/page-2-c │ ├── _index.md \u0026lt;-- /level-one │ ├── page-1-a.md \u0026lt;-- /level-one/page-1-a │ ├── page-1-b.md \u0026lt;-- /level-one/page-1-b │ └── page-1-c.md \u0026lt;-- /level-one/page-1-c ├── _index.md \u0026lt;-- / └── page-top.md \u0026lt;-- /page-top  `_index.md` is required in each folder, it’s your “folder home page”  Types Hugo-theme-learn defines two types of pages. Default and Chapter. Both can be used at any level of the documentation, the only difference being layout display.\nA Chapter displays a page meant to be used as introduction for a set of child pages. Commonly, it contains a simple title and a catch line to define content that can be found under it. You can define any HTML as prefix for the menu. In the example below, it\u0026rsquo;s just a number but that could be an icon.\n+++ title = \u0026quot;Basics\u0026quot; chapter = true weight = 5 pre = \u0026quot;\u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt;\u0026quot; +++ ### Chapter 1 # Basics Discover what this Hugo theme is all about and the core-concepts behind it.  To tell Hugo-theme-learn to consider a page as a chapter, set chapter=true in the Front Matter of the page.\nA Default page is any other content page.\n+++ title = \u0026quot;Installation\u0026quot; weight = 15 +++  The following steps are here to help you initialize your new website. If you don\u0026rsquo;t know Hugo at all, we strongly suggest you to train by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u0026lt;new_project\u0026gt;  Hugo-theme-learn provides archetypes to help you create this kind of pages.\nFront Matter configuration Each Hugo page has to define a Front Matter in yaml, toml or json.\nHugo-theme-learn uses the following parameters on top of Hugo ones :\n+++ # Table of content (toc) is enabled by default. Set this parameter to true to disable it. # Note: Toc is always disabled for chapter pages disableToc = \u0026quot;false\u0026quot; # If set, this will be used for the page's menu entry (instead of the `title` attribute) menuTitle = \u0026quot;\u0026quot; # The title of the page in menu will be prefixed by this HTML content pre = \u0026quot;\u0026quot; # The title of the page in menu will be postfixed by this HTML content post = \u0026quot;\u0026quot; # Set the page as a chapter, changing the way it's displayed chapter = false # Hide a menu entry by setting this to true hidden = false # Display name of this page modifier. If set, it will be displayed in the footer. LastModifierDisplayName = \u0026quot;\u0026quot; # Email of this page modifier. If set with LastModifierDisplayName, it will be displayed in the footer LastModifierEmail = \u0026quot;\u0026quot; +++  Add icon to a menu entry In the page frontmatter, add a pre param to insert any HTML code before the menu label. The example below uses the Github icon.\n+++ title = \u0026quot;Github repo\u0026quot; pre = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; \u0026quot; +++  Ordering sibling menu/page entries Hugo provides a flexible way to handle order for your pages.\nThe simplest way is to set weight parameter to a number.\n+++ title = \u0026quot;My page\u0026quot; weight = 5 +++  Using a custom title for menu entries By default, Hugo-theme-learn will use a page\u0026rsquo;s title attribute for the menu item (or linkTitle if defined).\nBut a page\u0026rsquo;s title has to be descriptive on its own while the menu is a hierarchy. We\u0026rsquo;ve added the menuTitle parameter for that purpose:\nFor example (for a page named content/install/linux.md):\n+++ title = \u0026quot;Install on Linux\u0026quot; menuTitle = \u0026quot;Linux\u0026quot; +++  Homepage To configure your home page, you basically have three choices:\n Create an _index.md document in content folder and fill the file with Markdown content Create an index.html file in the static folder and fill the file with HTML content Configure your server to automatically redirect home page to one your documentation page  "
},
{
	"uri": "/projects/simulations/stonessheep/",
	"title": "Stone&#39;s Sheep",
	"tags": [],
	"description": "",
	"content": " In Hugo, pages are the core of your site. Once it is configured, pages are definitely the added value to your documentation site.\nFolders Organize your site like any other Hugo project. Typically, you will have a content folder with all your pages.\ncontent ├── level-one │ ├── level-two │ │ ├── level-three │ │ │ ├── level-four │ │ │ │ ├── _index.md \u0026lt;-- /level-one/level-two/level-three/level-four │ │ │ │ ├── page-4-a.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-a │ │ │ │ ├── page-4-b.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-b │ │ │ │ └── page-4-c.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-c │ │ │ ├── _index.md \u0026lt;-- /level-one/level-two/level-three │ │ │ ├── page-3-a.md \u0026lt;-- /level-one/level-two/level-three/page-3-a │ │ │ ├── page-3-b.md \u0026lt;-- /level-one/level-two/level-three/page-3-b │ │ │ └── page-3-c.md \u0026lt;-- /level-one/level-two/level-three/page-3-c │ │ ├── _index.md \u0026lt;-- /level-one/level-two │ │ ├── page-2-a.md \u0026lt;-- /level-one/level-two/page-2-a │ │ ├── page-2-b.md \u0026lt;-- /level-one/level-two/page-2-b │ │ └── page-2-c.md \u0026lt;-- /level-one/level-two/page-2-c │ ├── _index.md \u0026lt;-- /level-one │ ├── page-1-a.md \u0026lt;-- /level-one/page-1-a │ ├── page-1-b.md \u0026lt;-- /level-one/page-1-b │ └── page-1-c.md \u0026lt;-- /level-one/page-1-c ├── _index.md \u0026lt;-- / └── page-top.md \u0026lt;-- /page-top  `_index.md` is required in each folder, it’s your “folder home page”  Types Hugo-theme-learn defines two types of pages. Default and Chapter. Both can be used at any level of the documentation, the only difference being layout display.\nA Chapter displays a page meant to be used as introduction for a set of child pages. Commonly, it contains a simple title and a catch line to define content that can be found under it. You can define any HTML as prefix for the menu. In the example below, it\u0026rsquo;s just a number but that could be an icon.\n+++ title = \u0026quot;Basics\u0026quot; chapter = true weight = 5 pre = \u0026quot;\u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt;\u0026quot; +++ ### Chapter 1 # Basics Discover what this Hugo theme is all about and the core-concepts behind it.  To tell Hugo-theme-learn to consider a page as a chapter, set chapter=true in the Front Matter of the page.\nA Default page is any other content page.\n+++ title = \u0026quot;Installation\u0026quot; weight = 15 +++  The following steps are here to help you initialize your new website. If you don\u0026rsquo;t know Hugo at all, we strongly suggest you to train by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u0026lt;new_project\u0026gt;  Hugo-theme-learn provides archetypes to help you create this kind of pages.\nFront Matter configuration Each Hugo page has to define a Front Matter in yaml, toml or json.\nHugo-theme-learn uses the following parameters on top of Hugo ones :\n+++ # Table of content (toc) is enabled by default. Set this parameter to true to disable it. # Note: Toc is always disabled for chapter pages disableToc = \u0026quot;false\u0026quot; # If set, this will be used for the page's menu entry (instead of the `title` attribute) menuTitle = \u0026quot;\u0026quot; # The title of the page in menu will be prefixed by this HTML content pre = \u0026quot;\u0026quot; # The title of the page in menu will be postfixed by this HTML content post = \u0026quot;\u0026quot; # Set the page as a chapter, changing the way it's displayed chapter = false # Hide a menu entry by setting this to true hidden = false # Display name of this page modifier. If set, it will be displayed in the footer. LastModifierDisplayName = \u0026quot;\u0026quot; # Email of this page modifier. If set with LastModifierDisplayName, it will be displayed in the footer LastModifierEmail = \u0026quot;\u0026quot; +++  Add icon to a menu entry In the page frontmatter, add a pre param to insert any HTML code before the menu label. The example below uses the Github icon.\n+++ title = \u0026quot;Github repo\u0026quot; pre = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; \u0026quot; +++  Ordering sibling menu/page entries Hugo provides a flexible way to handle order for your pages.\nThe simplest way is to set weight parameter to a number.\n+++ title = \u0026quot;My page\u0026quot; weight = 5 +++  Using a custom title for menu entries By default, Hugo-theme-learn will use a page\u0026rsquo;s title attribute for the menu item (or linkTitle if defined).\nBut a page\u0026rsquo;s title has to be descriptive on its own while the menu is a hierarchy. We\u0026rsquo;ve added the menuTitle parameter for that purpose:\nFor example (for a page named content/install/linux.md):\n+++ title = \u0026quot;Install on Linux\u0026quot; menuTitle = \u0026quot;Linux\u0026quot; +++  Homepage To configure your home page, you basically have three choices:\n Create an _index.md document in content folder and fill the file with Markdown content Create an index.html file in the static folder and fill the file with HTML content Configure your server to automatically redirect home page to one your documentation page  "
},
{
	"uri": "/projects/",
	"title": "Research Projects",
	"tags": [],
	"description": "",
	"content": " My research centres around three core themes:\n Using freely and globally available data and software to predict where tropical species are most at risk of human exploitation; Simulating the outcomes of natural resources management (including wild meat and fisheries); Applying formal decision-making tools like Bayesian decision networks to assess the tradeoffs in management, its susceptability to uncertainties, and its effects on people who depend on wild resources.  Spatial Mapping of Bushmeat Hunting I use circuit-based movement simulations to predict where bushmeat hunting effort is concentrated in understudied and remote tropical forests. Combining globally available geospatial data, open-source movement model software, and camera trap images of human hunters in tropical forests, I assess whether simple movement models can mimic foraging patterns of otherwise untrackable wild meat hunters.\nMore details here\nBayesian Decision Analysis and MSE for Resources Management I am interested not only in capturing where hunting occurs, but also what management options can meet the needs of forest dwelling peoples without threatening vulnerable tropical species. Sustainable management is incredibly difficult to attain, however, especially in understudied and inaccessible tropical forests.\nMany tropical forest-dwelling peoples have used and continue to use time- and space-based hunting management to prevent overexploitation of wildlife. One such method in Malaysia - tagal hutan - has been offered as a sustainable way to harvest forest products including meat. Using dynamic and spatially explicit population-harvest simulations of wild meat hunting, I how ecological conditions, hunter behaviour, and tagal hutan management strategies influence the sustainability of spatial hunting closures.\nMore details here\nUndergraduate Honours Thesis Functional Diversity in South Pacific Coral Reef Fish Communities More on the way\u0026hellip;\nOther Research Projects Transparency in Fisheries Decision Making More on the way\u0026hellip;\nPVAInvasR and Shiny More on the way\u0026hellip;\n"
},
{
	"uri": "/projects/decision_making/",
	"title": "Bayesian Decision Analysis",
	"tags": [],
	"description": "",
	"content": " Socially and ecologically sustaniable harvests ATLANTIC REDFISH Atlantic Canada has suffered socially and economically since the demise of the Northern Cod fisheries and its subsequent closure in the 1990s. The cod moratorium left fishers seeking alternative fish stocks - including redfish, a deep-dwelling, long-lived groundfish. Rarely is there good news in the world of commercial fisheries, but recent booms in the Gulf of St. Lawrence\u0026rsquo;s two redfish species - Sebastes fasciatus and Sebastes mentella - are encouraging, supposedly able to provide large catches for at least the next 20 years. However, until recently it was unclear how to manage this stock long-term, especially given its sporatic population dynamics.\nWorking with scientists from UBC and DFO, I helped develop and summarize a management strategy evaluation to aid DFO decision-makers in setting harvest rules for the fishery. Through ongoing meetings with fishery stakeholders, a management strategy evaluation was built and assessed with Bayesian decision tools to determine how to best manage the redfish stock in the face of considerable uncertainty. This ongoing project seeks to answer three questions:\n How should we measure the serious social, economic, and ecological outcomes of the redfish population boom? What are the most robust  MANGEMENT STRATEGY EVALUATION FOR STONES\u0026rsquo; SHEEP "
},
{
	"uri": "/teaching/code_for_all/",
	"title": "Coding for the Masses",
	"tags": [],
	"description": "",
	"content": " UBC + LTS Python Coding Club As part of a passionate and diverse team of graduate student volunteers who use coding in their work, I\u0026rsquo;ve been involved in teaching basic programming skills to middle- and high-school aged girls. Women often make up a small proportion of workers in technical fields, especially computer science. Having benefitted from coding skills in our own work, me and the teaching team seek to inspire curiosity, confidence, and passion for programming in girls who are just starting to think about their careers.\nStarting from no programming knowledge, we introduce the students to the fundamentals of programming using Trinket, a free-to-use online-hosted Python and Blockly editor. Over the course of 6 free weekly workshops, our students learn everything from variable creation to while loops, and practice their skills by creating their own interactive game.\nSince 2017, I\u0026rsquo;ve been involved in organizing, writing lessons for, and teaching these workshops. Check out the website here for more information/inspiration, or check out our ever-developing lesson plan if you\u0026rsquo;d like to run something similar!\nMIT App Inventor at the UBC Learning Exchange Inspired by the impacts of the Girls\u0026rsquo; Coding Club, I also developed a full-day coding workshop in collaboration with the UBC Learning Exchange - a community-focused learning centre in Vancouver\u0026rsquo;s Downtown Eastside. To engage Downtown Eastside residents with programming in an interactive and hands-on way, I developed a workshop based on MIT\u0026rsquo;s App Inventor, a simple block-based development environment that creates Android apps.\nBecause many Downtown Eastside residents do not have reliable access to a computer or internet, we taught them how to create mobile apps they could carry home with them. This workshop was taught in December 2018 to students aged 30-75, and taught the basics of programming logic in a Blocks programming environment.\nCheck out our one-day workshop lesson plan here!\n"
},
{
	"uri": "/teaching/conservation/",
	"title": "Ecology &amp; Conservation",
	"tags": [],
	"description": "",
	"content": " Let\u0026rsquo;s Talk Science Outreach Conservation Biology (BIOL 416) - Introduction to R In Spring 2019, I was a teaching assistant for UBC\u0026rsquo;s Conservation Biology course. Focused on teaching the principles of Conservation Biology with a focus on quantitative modelling and statistical analysis of ecological data, I was brought on to the teaching team to develop and present introductory R lessons. Over the course of 4 code-along tutorials (each approximately 3 hours long), the class covered basic and intermediate R skills including data manipulation, statistical analysis, graphing, and phylogenetic regression.\nFeel free to use these introductory R lessons\n"
},
{
	"uri": "/projects/simulations/",
	"title": "MSE for Sustainable Harvests",
	"tags": [],
	"description": "",
	"content": " Socially and ecologically sustaniable harvests ATLANTIC REDFISH Atlantic Canada has suffered socially and economically since the demise of the Northern Cod fisheries and its subsequent closure in the 1990s. The cod moratorium left fishers seeking alternative fish stocks - including redfish, a deep-dwelling, long-lived groundfish. Rarely is there good news in the world of commercial fisheries, but recent booms in the Gulf of St. Lawrence\u0026rsquo;s two redfish species - Sebastes fasciatus and Sebastes mentella - are encouraging, supposedly able to provide large catches for at least the next 20 years. However, until recently it was unclear how to manage this stock long-term, especially given its sporatic population dynamics.\nWorking with scientists from UBC and DFO, I helped develop and summarize a management strategy evaluation to aid DFO decision-makers in setting harvest rules for the fishery. Through ongoing meetings with fishery stakeholders, a management strategy evaluation was built and assessed with Bayesian decision tools to determine how to best manage the redfish stock in the face of considerable uncertainty. This ongoing project seeks to answer three questions:\n How should we measure the serious social, economic, and ecological outcomes of the redfish population boom? What are the most robust  MANGEMENT STRATEGY EVALUATION FOR STONES\u0026rsquo; SHEEP "
},
{
	"uri": "/projects/simulations/shiny_pva/",
	"title": "PVA+Shiny for Invasive Species Eradication",
	"tags": [],
	"description": "",
	"content": " Socially and ecologically sustaniable harvests ATLANTIC REDFISH Atlantic Canada has suffered socially and economically since the demise of the Northern Cod fisheries and its subsequent closure in the 1990s. The cod moratorium left fishers seeking alternative fish stocks - including redfish, a deep-dwelling, long-lived groundfish. Rarely is there good news in the world of commercial fisheries, but recent booms in the Gulf of St. Lawrence\u0026rsquo;s two redfish species - Sebastes fasciatus and Sebastes mentella - are encouraging, supposedly able to provide large catches for at least the next 20 years. However, until recently it was unclear how to manage this stock long-term, especially given its sporatic population dynamics.\nWorking with scientists from UBC and DFO, I helped develop and summarize a management strategy evaluation to aid DFO decision-makers in setting harvest rules for the fishery. Through ongoing meetings with fishery stakeholders, a management strategy evaluation was built and assessed with Bayesian decision tools to determine how to best manage the redfish stock in the face of considerable uncertainty. This ongoing project seeks to answer three questions:\n How should we measure the serious social, economic, and ecological outcomes of the redfish population boom? What are the most robust  MANGEMENT STRATEGY EVALUATION FOR STONES\u0026rsquo; SHEEP "
},
{
	"uri": "/teaching/",
	"title": "Teaching",
	"tags": [],
	"description": "",
	"content": "Teaching is awesome!\n"
},
{
	"uri": "/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Welcome! I am an ever-curious ecologist and coder focused on the spatial dynamics and impacts of harvesting wild animals. With research projects spanning from the tropical forests of Southeast Asia to the coast of Atlantic Canada, I seek to understand:\n what drives spatial patterns of harvest? how can we sustainably manage harvests even when data are scarce? how can we leverage technology and software to ensure sustainable harvesting?  Using tools like spatial movement models, ecological simulations, quantitative and Bayesian decision-support tools, and socioeconomic analysis, I research how technical tools can help conservationists balance subsistence with sustainability.\nWhen I\u0026rsquo;m not being a code monkey, you can find me teaching introductory programming and ecology, biking, or watching Star Trek.\nHere you can find more information about my research projects, experience and education, as well as some blog posts about using open-source software for teaching and research.\nThis website is a work in progress. Last edited on August 13, 2019\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/2015-07-23-r-rmarkdown/",
	"title": "Hello R Markdown",
	"tags": ["R Markdown", "plot", "regression"],
	"description": "This is a demo child page",
	"content": " knitr::opts_chunk$set(collapse = TRUE) R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) fit \u0026lt;- lm(dist ~ speed, data = cars) fit  Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA )  Figure 1: A fancy pie chart.   "
},
{
	"uri": "/post/2015-07-23-r-rmarkdown/",
	"title": "Hello R Markdown",
	"tags": ["R Markdown", "plot", "regression"],
	"description": "This is a demo child page",
	"content": " knitr::opts_chunk$set(collapse = TRUE)  R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) fit \u0026lt;- lm(dist ~ speed, data = cars) fit  Including Plots You can also embed plots. See Figure \\@ref(fig:pie) for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'), col = c('#0292D8', '#F7EA39', '#C4B632'), init.angle = -50, border = NA )  "
},
{
	"uri": "/categories/r/",
	"title": "R",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/r-markdown/",
	"title": "R Markdown",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/plot/",
	"title": "plot",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/regression/",
	"title": "regression",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/post/",
	"title": "Posts &amp; Tutorials",
	"tags": [],
	"description": "",
	"content": "Here I\u0026rsquo;ll post various tips, tricks, and things I thought were interesting when I stumbled across them on the internet. Each post is tagged with a few keywords that can be found under Tags.\n Hello R Markdown  This is a demo child page\n "
},
{
	"uri": "/tags/testing/",
	"title": "testing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/about/_index0/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "CV GOES HERE\n"
},
{
	"uri": "/teaching/conservation/rtuts/12.12.2018.biol416.rphylotutorial_post/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " BIOL 416 R Tutorial 2 - Phylogenies in R        code{white-space: pre;} div.sourceCode { overflow-x: auto; } table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode { margin: 0; padding: 0; vertical-align: baseline; border: none; } table.sourceCode { width: 100%; line-height: 100%; background-color: #303030; color: #cccccc; } td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; } td.sourceCode { padding-left: 5px; } pre, code { color: #cccccc; background-color: #303030; } code  span.kw { color: #f0dfaf; } /* Keyword */ code  span.dt { color: #dfdfbf; } /* DataType */ code  span.dv { color: #dcdccc; } /* DecVal */ code  span.bn { color: #dca3a3; } /* BaseN */ code  span.fl { color: #c0bed1; } /* Float */ code  span.ch { color: #dca3a3; } /* Char */ code  span.st { color: #cc9393; } /* String */ code  span.co { color: #7f9f7f; } /* Comment */ code  span.ot { color: #efef8f; } /* Other */ code  span.al { color: #ffcfaf; } /* Alert */ code  span.fu { color: #efef8f; } /* Function */ code  span.er { color: #c3bf9f; } /* Error */ code  span.wa { color: #7f9f7f; font-weight: bold; } /* Warning */ code  span.cn { color: #dca3a3; font-weight: bold; } /* Constant */ code  span.sc { color: #dca3a3; } /* SpecialChar */ code  span.vs { color: #cc9393; } /* VerbatimString */ code  span.ss { color: #cc9393; } /* SpecialString */ code  span.im { } /* Import */ code  span.va { } /* Variable */ code  span.cf { color: #f0dfaf; } /* ControlFlow */ code  span.op { color: #f0efd0; } /* Operator */ code  span.bu { } /* BuiltIn */ code  span.ex { } /* Extension */ code  span.pp { color: #ffcfaf; font-weight: bold; } /* Preprocessor */ code  span.at { } /* Attribute */ code  span.do { color: #7f9f7f; } /* Documentation */ code  span.an { color: #7f9f7f; font-weight: bold; } /* Annotation */ code  span.cv { color: #7f9f7f; font-weight: bold; } /* CommentVar */ code  span.in { color: #7f9f7f; font-weight: bold; } /* Information */   // apply pandoc div.sourceCode style to pre.sourceCode instead (function() { var sheets = document.styleSheets; for (var i = 0; i pre:not([class]) { background-color: white; }  h1 { font-size: 34px; } h1.title { font-size: 38px; } h2 { font-size: 30px; } h3 { font-size: 24px; } h4 { font-size: 18px; } h5 { font-size: 16px; } h6 { font-size: 12px; } .table th:not([align]) { text-align: left; }    .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } code { color: inherit; background-color: rgba(0, 0, 0, 0.04); } img { max-width:100%; height: auto; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; }  .tabset-dropdown  .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; background: white; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown  .nav-tabs  li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li.active:before { content: \"\"; border: none; } .tabset-dropdown  .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs  li.active { display: block; } .tabset-dropdown  .nav-tabs  li  a, .tabset-dropdown  .nav-tabs  li  a:focus, .tabset-dropdown  .nav-tabs  li  a:hover { border: none; display: inline-block; border-radius: 4px; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li { display: block; float: none; } .tabset-dropdown  .nav-tabs  li { display: none; }   $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown  .nav-tabs  li').click(function () { $(this).parent().toggleClass('nav-tabs-open') }); });   $(document).ready(function () { // move toc-ignore selectors from section div to header $('div.section.toc-ignore') .removeClass('toc-ignore') .children('h1,h2,h3,h4,h5').addClass('toc-ignore'); // establish options var options = { selectors: \"h1,h2,h3\", theme: \"bootstrap3\", context: '.toc-content', hashGenerator: function (text) { return text.replace(/[.\\\\/?\u0026!#]/g, '').replace(/\\s/g, '_').toLowerCase(); }, ignoreSelector: \".toc-ignore\", scrollTo: 0 }; options.showAndHide = true; options.smoothScroll = true; // tocify var toc = $(\"#TOC\").tocify(options).data(\"toc-tocify\"); });  #TOC { margin: 25px 0px 20px 0px; } @media (max-width: 768px) { #TOC { position: relative; width: 100%; } } .toc-content { padding-left: 30px; padding-right: 40px; } div.main-container { max-width: 1200px; } div.tocify { width: 20%; max-width: 260px; max-height: 85%; } @media (min-width: 768px) and (max-width: 991px) { div.tocify { width: 25%; } } @media (max-width: 767px) { div.tocify { width: 100%; max-width: none; } } .tocify ul, .tocify li { line-height: 20px; } .tocify-subheader .tocify-item { font-size: 0.90em; padding-left: 25px; text-indent: 0; } .tocify .list-group-item { border-radius: 0px; }    BIOL 416 R Tutorial 2 - Phylogenies in R Mairin Deith  Tutorial 2 January 21 \u0026amp; 23, 2019\nReview of last week’s tutorial (Introduction to R) Objects - 0, 1, and 2-D objects Indexing objects - using [] and name-based $ notation Plotting Linear regression and models  is.human \u0026lt;-TRUE is.human ==TRUE is.human ==10 read.csv(\u0026quot; \u0026quot;) data(iris) s.l \u0026lt;-iris$Sepal.Length s.l.deviation \u0026lt;-iris$Sepal.Length/mean(iris$Sepal.Length) plot(iris$Sepal.Length ~iris$Sepal.Width) lm(iris$Sepal.Length ~iris$Sepal.Width)  Introduction to phylogenies In this course, we’ll be working with phylogenetic trees and evolutionary relationships between species. Evolution and the relatedness between species is increasingly used in conservation biology to identify the evolutionary consequences of extinction and identify whether closely related species share traits that make them more or less susceptible to extinction.\nPhylogenetic tree = a representation of species’ inter-relatedness; which species share ancestors and when their lineages diverged\nUltimately, we are interested in a few key pieces of information from the phylogeny:\n Node : a point where a lineage splits into multiple descendant lineages (numbered 5-7 below) Edge/branch : lines that connect nodes in the tree, length represents evolutionary time Tip : terminal edges/branches that represent currently living lineages Root : nodes that are the root of all edges/branches  Within the tree, we can represent the branching of lineages as a function of time or mutations.  Strix aluco = tawny owl Asio otus = long-eared owl Athene nocturna = little owl Tyto alba = barn owl   Introduction to packages We are now going to dive in to using R to work with phylogenies.\nPackages are pre-arranged sets of data, functions, and other R programming components. Often, when we want to do something in R like perform a statistical test or make a figure, someone has done this before. If they have published their code online in a package, you can borrow the functions they have written in order to do your own work.\nSee the CRAN task view website, with specific focus on the Phylogenetics task view.\nAny time you need to use a specialized set of functions, you can probably find a relevant library on CRAN or through another software source like GitHub. We are going to dive into a specific library that you’ll use throughout the rest of this course called picante.\n The picante library picante provides functions for phylogenetic and community analysis. You’ll be using phylogenetic analysis later in the semester for your upcoming assignments.\nThe first step to using a package is installation. We’ll install the picante package from an online source - for R, most of the time you will be installing packages from CRAN, the Comprehensive R Archive Network.\nWe can install packages in R using the install.packages() command. After the package has been installed, we load it into our R session using the library() command.\n# Dependencies are other packages that can be borrowed from install.packages(\u0026quot;picante\u0026quot;, dependencies = TRUE) library(picante) Note: You only have to install the package once; every time you start a new R session, however, you have to load the package with library().\nJust like with functions, we can use the help() command to find out more information about our newly loaded library in the Help tab on the right-hand panel.\nLet’s take a closer look at picante and the functions it adds to our library:\nhelp(package=picante) This shows us individual help pages for each function that picante provides - you can see there are a lot of available functions that come with picante.\n Inside of the help panel, we can also look at something called a vignette - a friendly introductory tutorial that is designed to give you an easy entry point to using the package.\n We’ll be working together through some of the materials presented in picante’s vignette, in fact.\nFinally, some packages come with data sets just like the iris data set we looked at last week. picante comes with a data set called phylocom - it includes phylogenetic, community, and trait data.\nYou can load this with\ndata(\u0026quot;phylocom\u0026quot;) and inspect the contents with\nhelp(phylocom) # or summary(phylocom) ## Length Class Mode ## phylo 5 phylo list ## sample 150 -none- numeric ## traits 4 data.frame list Notice that phylocom has three named components that we can access one-at-a-time using the $ notation: phylo, sample, and traits. These are the phylogenetic tree, a data frame of which species are found where, and the traits that those species have.\nFor example:\n# The phylogenetic tree: phylocom$phylo # The community data: phylocom$sample # And finally, trait data: phylocom$traits Let’s talk about what these data types are, because you’ll be using them in your assignments throughout the rest of this course.\nData types in picante: the phylo class In picante and other phylogenetic libraries in R, there is a special class of data called the phylo class. This data type represents phylogenetic trees in a way that the computer and R can understand and manipulate.\nIgnoring the phylocom data set that is pre-built into picante, we’re going to start with a simple example phylogeny that has four species of owl. Let’s create a phylo class object using the read.tree() command that was added to our library when we installed picante.\nWe’re not going to build the tree from scratch, rather we’re going to read in a pre-saved phylogeny from the owls.tre Newick file, indicated by the .tre file type. This line will work only if your owls.tre file is located inside of the folder where R is running. You can check this with the dir() command.\nowl.tree \u0026lt;-read.tree(\u0026quot;owls.tre\u0026quot;) If you don’t know where your file is located and want to find it using a pop-up file selection window, you can also read in the .tre file with:\nowl.tree \u0026lt;-read.tree(file.choose()) Take a look at the tree:\nowl.tree ## ## Phylogenetic tree with 4 tips and 3 internal nodes. ## ## Tip labels: ## [1] \u0026quot;Strix_aluco\u0026quot; \u0026quot;Asio_otus\u0026quot; \u0026quot;Athene_noctua\u0026quot; \u0026quot;Tyto_alba\u0026quot; ## ## Rooted; includes branch lengths. R tells us there are four tips and three internal nodes (or, four species and three internal branching points).\nWe can take a closer look using the str[ucture] command like this:\nstr(owl.tree) ## List of 4 ## $ edge : int [1:6, 1:2] 5 6 7 7 6 5 6 7 1 2 ... ## $ edge.length: num [1:6] 6.3 3.1 4.2 4.2 7.3 13.5 ## $ Nnode : int 3 ## $ tip.label : chr [1:4] \u0026quot;Strix_aluco\u0026quot; \u0026quot;Asio_otus\u0026quot; \u0026quot;Athene_noctua\u0026quot; \u0026quot;Tyto_alba\u0026quot; ## - attr(*, \u0026quot;class\u0026quot;)= chr \u0026quot;phylo\u0026quot; ## - attr(*, \u0026quot;order\u0026quot;)= chr \u0026quot;cladewise\u0026quot; Components of a phylo object There are four named components in our phylogenetic tree:\nedge: a 2-dimensional matrix where each row is an edge of the tree  owl.tree$edge ## [,1] [,2] ## [1,] 5 6 ## [2,] 6 7 ## [3,] 7 1 ## [4,] 7 2 ## [5,] 6 3 ## [6,] 5 4 # relationships between ancestors and tips, current species This tells us that there are six edges in total in our phylogenetic tree. The first edge, [ 5 6 ] is the branch that runs from our root, node #5, to node #6, the splitting point.\nNnode: 3, the number of internal nodes (does not include the tips) tip.label: a vector of names that are used on the tips of the tree  owl.tree$tip.label ## [1] \u0026quot;Strix_aluco\u0026quot; \u0026quot;Asio_otus\u0026quot; \u0026quot;Athene_noctua\u0026quot; \u0026quot;Tyto_alba\u0026quot; edge.length: a vector of numbers that correspond to the lengths of the edges in $edge  owl.tree$edge.length ## [1] 6.3 3.1 4.2 4.2 7.3 13.5 These are the components that go into a phylo object.\n What the phylo object looks like underneath Let’s take a peek at the original file we read into R as a phylo object. We can do this by opening the text file directly in R.\nowls(((Strix_aluco:4.2,Asio_otus:4.2):3.1,Athene_noctua:7.3):6.3,Tyto_alba:13.5); owls = the name of the tree\nThe colon : separates the tip labels from the edge lengths, parentheses show us which species should be connected by that branch length.\nNotice that the tips are shown from bottom to top - we can compare all of this to the results we saw when we called $edge and $edge.lengths in the phylo object.\nEverything we see in the phylogenetic tree comes from a relatively simple file.\n Plotting a phylogenetic tree Plotting a phylo object is straightforward:\nplot(owl.tree) We can add modifications like adding tip labels\nplot(owl.tree) # Adding a horizontal scale bar: add.scale.bar() # Adding a text label to show the units for the scale bar text(1,1.1,\u0026quot;MY\u0026quot;) # Adding labels to the intermediate nodes nodelabels()  Modifying phylo objects Changing tip names There are two ways to modify the tip names in the phylogenetic tree: you can directly edit the Newick text document or you can modify the names in R itself.\nBe careful about how you write these names - R, like many programming languages, cannot handle spaces in names and will have issues if you provide spaces.\nWhen changing the Newick file directly, let’s change the name of Strix aluco to Owl One, and save as a new file, owls2.tre:\nowls(((Owl_one:4.2,Asio_otus:4.2):3.1,Athene_noctua:7.3):6.3,Tyto_alba:13.5); owl.tree.2 \u0026lt;-read.tree(\u0026quot;owls2.tre\u0026quot;) plot(owl.tree.2) We can also change the name using the $tip.label component of the phylogenetic object.\n# Save a pristine copy of owl.tree first, in case we make mistakes later on owl.tree.3 \u0026lt;-owl.tree owl.tree.3$tip.label ## [1] \u0026quot;Strix_aluco\u0026quot; \u0026quot;Asio_otus\u0026quot; \u0026quot;Athene_noctua\u0026quot; \u0026quot;Tyto_alba\u0026quot; owl.tree.3$tip.label[1] \u0026lt;-\u0026quot;Owl_one\u0026quot; plot(owl.tree.3)  Change edge lengths Similar to how we changed the tip labels for the phylogenetic tree, we can also change the edge lengths of the branches in the tree. Let’s try this by changing the edge lengths equal to 1 million years.\nTo do this in the Newick file, change all numbers to 1, save as a new file owls.branch1.tre, and load into R:\nowls(((Strix_aluco:1,Asio_otus:1):1,Athene_noctua:1):1,Tyto_alba:1); owl.tree.4 \u0026lt;-read.tree(\u0026quot;owls_branch1.tre\u0026quot;) plot(owl.tree.4) Notice that the edge length leading to Tyto alba is now much shorter than it used to be - this is because the phylogenetic tree’s branches are all the same size. So if we know that Owl one and Asio otus are 1MY apart, and work our way back to the root node, the phylogenetic tree believes that Tyto alba’s lineage disappeared only one million years after the root node.\nOf course, we can also make this change in R using $edge.length\nowl.tree.4 \u0026lt;-owl.tree # How many edges are there to replace with 1's? n.edges \u0026lt;-nrow(owl.tree.4$edge) owl.tree.4$edge.length \u0026lt;-rep(1, n.edges) # Another way to do this: owl.tree.4$edge.length[1:6] \u0026lt;-1 plot(owl.tree.4)    Data types in picante: community objects Often when we work with phylogenetic data, we’re interested in comparing the phylogenetic history of the species observed in a species community. The picante package also uses community data, records of observations of a species at different sites.\nCommunity data is represented as a 2D object (data-frame/matrix) where sites/samples are placed in the rows and taxa in the columns.\nSo let’s make a new data-frame for our owls at three imaginary sites: SiteA, B, and C:\n   Strix_aluco Asio_otus Athene_noctua Tyto_alba    SiteA 0 1 1 0  SiteB 0 0 1 1  SiteC 1 0 1 1    To make this data frame in R, we could either read in a .csv file of community data or, because we’re using a simple example, we can also make a new data frame from scratch and tell R what to put in each column:\nowl.comm \u0026lt;-data.frame(Strix_aluco = c(0,0,1), Asio_otus = c(1,0,0), Athene_noctua = c(1,1,1), Tyto_alba = c(0,1,1) ) ##### Just create this in Excel then export to .csv and read it in rownames(owl.comm) \u0026lt;-c(\u0026quot;SiteA\u0026quot;,\u0026quot;SiteB\u0026quot;,\u0026quot;SiteC\u0026quot;) owl.comm ## Strix_aluco Asio_otus Athene_noctua Tyto_alba ## SiteA 0 1 1 0 ## SiteB 0 0 1 1 ## SiteC 1 0 1 1 Now we have a community data set, showing which species were present at each site.\nWhat picante can do now is match the column names to the tip labels in our phylogenetic tree. Note that the column names MUST MATCH the tip labels in the phylo object!\nWhile column names are used to match the species in each community to that species’ position in the phylogeny, row names can be used to give informative site names.\n Putting it all together - calculating phylogenetic diversity, PD Now we have two data objects - a phylogenetic tree for four owl species and a community data-frame showing which species were in sites A, B, and C.\nThe next thing we are going to do is calculated phylogenetic diversity, also called PD. Phylogenetic diversity is a measure of how much phylogenetic time is captured by an observed species assemblage. It captures the total edge length of a phylogenetic tree that is represented by a community.\nOf the three sites shown above, which do you think will have the greatest phylogenetic diversity?\nThe PD calculation Basically, when we calculate phylogenetic diversity, we are calculating how much evolutionary time is represented in that community, or the phylogenetic distinctiveness of its members. If all species are very closely related to one another, PD is low; conversely, if there is a lot of evolutionary differentiation between species present in a community, PD is high.\nWe’re now going to calculate the phylogenetic diversity of our owl community in two ways: first by hand, then using a pre-built function from picante.\nSteps:\nPrune the phylogenetic tree for each community so that it only spans the observed species Decide whether to include the root node or create a new root node for the community Sum together the branch lengths to calculate PD   Calculating PD by hand ##### Subset to Site A first, then create list of taxa that are present and absent, drop the tips of the absent species siteA.absent \u0026lt;-colnames(owl.comm)[ which(owl.comm[\u0026quot;SiteA\u0026quot;,]==0) # Take the time to explain this step!!!! ] owl.tree.siteA \u0026lt;-drop.tip(owl.tree, siteA.absent) siteA.pd \u0026lt;-sum(owl.tree.siteA$edge.length) plot(owl.tree.siteA) edgelabels() ### Now repeat for sites B and C siteB.absent \u0026lt;-colnames(owl.comm)[ which(owl.comm[\u0026quot;SiteB\u0026quot;,]==0) # Take the time to explain this step!!!! ] owl.tree.siteB \u0026lt;-drop.tip(owl.tree, siteB.absent) owl.tree.siteB ## ## Phylogenetic tree with 2 tips and 1 internal nodes. ## ## Tip labels: ## [1] \u0026quot;Athene_noctua\u0026quot; \u0026quot;Tyto_alba\u0026quot; ## ## Rooted; includes branch lengths. siteB.pd \u0026lt;-sum(owl.tree.siteB$edge.length) siteC.absent \u0026lt;-colnames(owl.comm)[ which(owl.comm[\u0026quot;SiteC\u0026quot;,]==0) # Take the time to explain this step!!!! ] owl.tree.siteC \u0026lt;-drop.tip(owl.tree, siteC.absent) siteC.pd \u0026lt;-sum(owl.tree.siteC$edge.length) paste0(\u0026quot;A:\u0026quot;, siteA.pd, \u0026quot; B:\u0026quot;, siteB.pd, \u0026quot; C:\u0026quot;, siteC.pd) ## [1] \u0026quot;A:14.6 B:27.1 C:34.4\u0026quot; Site A, where the only species present are “clumped” phylogenetically, has the lowest phylogenetic diversity while Site C has the highest.\n Calculating PD with the built-in picante function Even though calculating PD by hand is relatively easy, it can be tedious going site-by-site. Luckily, we can use picante’s built-in pd() function to calculate PD for each site automatically.\n##### Mention what the include.root means - on the board all.sites.pd \u0026lt;-pd(samp = owl.comm, tree = owl.tree, include.root = FALSE) all.sites.pd ## PD SR ## SiteA 14.6 2 ## SiteB 27.1 2 ## SiteC 34.4 3 Using the built-in function, we get the same answers as we did through hand calculations.\nNotice that the function gives us a data frame as output - we can now save this data.frame or use the values within for more calculations.\n        // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.header').parent('thead').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); });   (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();    "
},
{
	"uri": "/teaching/conservation/rtuts/biol416_introduction_to_r_notes/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " BIOL 416 R Tutorial 1 - Introduction to R        code{white-space: pre;} div.sourceCode { overflow-x: auto; } table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode { margin: 0; padding: 0; vertical-align: baseline; border: none; } table.sourceCode { width: 100%; line-height: 100%; background-color: #303030; color: #cccccc; } td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; } td.sourceCode { padding-left: 5px; } pre, code { color: #cccccc; background-color: #303030; } code  span.kw { color: #f0dfaf; } /* Keyword */ code  span.dt { color: #dfdfbf; } /* DataType */ code  span.dv { color: #dcdccc; } /* DecVal */ code  span.bn { color: #dca3a3; } /* BaseN */ code  span.fl { color: #c0bed1; } /* Float */ code  span.ch { color: #dca3a3; } /* Char */ code  span.st { color: #cc9393; } /* String */ code  span.co { color: #7f9f7f; } /* Comment */ code  span.ot { color: #efef8f; } /* Other */ code  span.al { color: #ffcfaf; } /* Alert */ code  span.fu { color: #efef8f; } /* Function */ code  span.er { color: #c3bf9f; } /* Error */ code  span.wa { color: #7f9f7f; font-weight: bold; } /* Warning */ code  span.cn { color: #dca3a3; font-weight: bold; } /* Constant */ code  span.sc { color: #dca3a3; } /* SpecialChar */ code  span.vs { color: #cc9393; } /* VerbatimString */ code  span.ss { color: #cc9393; } /* SpecialString */ code  span.im { } /* Import */ code  span.va { } /* Variable */ code  span.cf { color: #f0dfaf; } /* ControlFlow */ code  span.op { color: #f0efd0; } /* Operator */ code  span.bu { } /* BuiltIn */ code  span.ex { } /* Extension */ code  span.pp { color: #ffcfaf; font-weight: bold; } /* Preprocessor */ code  span.at { } /* Attribute */ code  span.do { color: #7f9f7f; } /* Documentation */ code  span.an { color: #7f9f7f; font-weight: bold; } /* Annotation */ code  span.cv { color: #7f9f7f; font-weight: bold; } /* CommentVar */ code  span.in { color: #7f9f7f; font-weight: bold; } /* Information */   // apply pandoc div.sourceCode style to pre.sourceCode instead (function() { var sheets = document.styleSheets; for (var i = 0; i pre:not([class]) { background-color: white; }  h1 { font-size: 34px; } h1.title { font-size: 38px; } h2 { font-size: 30px; } h3 { font-size: 24px; } h4 { font-size: 18px; } h5 { font-size: 16px; } h6 { font-size: 12px; } .table th:not([align]) { text-align: left; }    .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } code { color: inherit; background-color: rgba(0, 0, 0, 0.04); } img { max-width:100%; height: auto; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; }  .tabset-dropdown  .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; background: white; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown  .nav-tabs  li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li.active:before { content: \"\"; border: none; } .tabset-dropdown  .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs  li.active { display: block; } .tabset-dropdown  .nav-tabs  li  a, .tabset-dropdown  .nav-tabs  li  a:focus, .tabset-dropdown  .nav-tabs  li  a:hover { border: none; display: inline-block; border-radius: 4px; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li { display: block; float: none; } .tabset-dropdown  .nav-tabs  li { display: none; }   $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown  .nav-tabs  li').click(function () { $(this).parent().toggleClass('nav-tabs-open') }); });   $(document).ready(function () { // move toc-ignore selectors from section div to header $('div.section.toc-ignore') .removeClass('toc-ignore') .children('h1,h2,h3,h4,h5').addClass('toc-ignore'); // establish options var options = { selectors: \"h1,h2,h3\", theme: \"bootstrap3\", context: '.toc-content', hashGenerator: function (text) { return text.replace(/[.\\\\/?\u0026!#]/g, '').replace(/\\s/g, '_').toLowerCase(); }, ignoreSelector: \".toc-ignore\", scrollTo: 0 }; options.showAndHide = true; options.smoothScroll = true; // tocify var toc = $(\"#TOC\").tocify(options).data(\"toc-tocify\"); });  #TOC { margin: 25px 0px 20px 0px; } @media (max-width: 768px) { #TOC { position: relative; width: 100%; } } .toc-content { padding-left: 30px; padding-right: 40px; } div.main-container { max-width: 1200px; } div.tocify { width: 20%; max-width: 260px; max-height: 85%; } @media (min-width: 768px) and (max-width: 991px) { div.tocify { width: 25%; } } @media (max-width: 767px) { div.tocify { width: 100%; max-width: none; } } .tocify ul, .tocify li { line-height: 20px; } .tocify-subheader .tocify-item { font-size: 0.90em; padding-left: 25px; text-indent: 0; } .tocify .list-group-item { border-radius: 0px; }    BIOL 416 R Tutorial 1 - Introduction to R Mairin Deith  Preface These tutorials were developed to teach high-level undergraduate students the fundamentals of working in R and R Studio. Instructions have been modified from Dr. Steven Kembel’s “Biodiversity analysis in R” walkthrough to reflect the learning objectives of BIOL 416 at the University of British Columbia.\n Tutorial 1 January 14 \u0026amp; 16, 2019\nPrep Students should download the example iris.csv file from Canvas - this will be used to read in with read.csv().\n Working in RStudio and R Quick notes:\n the console communicates with the computer directly For example: \u0026gt; 1+1 does the math for you workflow between the script pane and the console is possible with Ctrl-Enter (Windows/Linux) or Cmd-Enter (MacOS) comments, lines starting with # are ignored by the computer and can keep track of notes for yourself or other people that might look at your code For example, what lines of code do, why you use certain functions, etc.   Objects Note: this does not currently include any introduction to lists, this may be necessary depending on how much understanding of lists is required to use the picante package and phylogenies in R.\n0-dimensional objects (single variables) The simplest objects in R are single values, or variables.\nYou assign a value to an object using \u0026lt;- notation. For example, to create a variable called x that is equal to 5:\nx \u0026lt;-5 A 0-dimensional object contains a single datum - a number, string of text, logical TRUE or FALSE values, or other types. We’ll explore each of these later.\nYou can name these objects whatever you want, but be careful: capitalization matters and you can’t put spaces in the names.\nIt’s generally a good idea to give the objects names that mean something to you:\nspecies.name \u0026lt;-\u0026quot;Homo sapiens\u0026quot; am.i.human \u0026lt;-TRUE number.of.legs \u0026lt;-2 Once you create an object, you can see what value it holds by calling it:\nx ## [1] 5 species.name ## [1] \u0026quot;Homo sapiens\u0026quot; You can also re-write a variable by re-assigning a value to it:\nx \u0026lt;-\u0026quot;new x\u0026quot; x ## [1] \u0026quot;new x\u0026quot;  1-dimensional objects (vectors) It is also possible to make objects that have more than one value in them.\nVectors are objects that contain multiple single datum, all in a row. It’s the same as vectors in matrix mathematics - a one-dimensional row of values.\nTo make this vector: \\(v = \\begin{pmatrix} 0 \u0026amp; 3 \u0026amp; 5 \u0026amp; 10 \u0026amp; 2 \\end{pmatrix}\\), we would write:\nv \u0026lt;-c(0, 3, 5, 10, 2) v ## [1] 0 3 5 10 2 The c() here stands for combine.\nThere are a few ways to pull out a single value from your vector. First, you can use square brackets ([X], where X is a number indicating the position where the datum you want is stored, from 1 to however many objects are in your vector).\nv[1] ## [1] 0 v[4] ## [1] 10 v[10] ## [1] NA Because we don’t have 10 datum in the vector, trying to pull out the 10th item gives NA, not applicable. The spot is empty.\nWe can also pull out multiple datum using c(), as before, or by using :. The colon indicates to R that we want values across a range; e.g. 1:3 means all numbers between 1 and 3 (1,2,3).\n# Using the combine function: v[c(1,2)] ## [1] 0 3 # Using a range of numbers: v[1:3] ## [1] 0 3 5 Another way to pull out datum from a vector is by naming each object in the vector, and referring to each datum by name rather than location:\nnames(v) \u0026lt;-c(\u0026quot;One\u0026quot;,\u0026quot;Two\u0026quot;,\u0026quot;Three\u0026quot;,\u0026quot;Four\u0026quot;,\u0026quot;Five\u0026quot;) # Now v has names attached to it v[\u0026quot;One\u0026quot;] ## One ## 0  An aside on data classes R uses three main types of classes:\n Numeric (numbers) Strings (text or individual characters, denoted by including \u0026quot; \u0026quot; around the text) Logical (also called Boolean, this class of data is a binary TRUE or FALSE value)  In a vector, all of the data have to be of the same type (numbers, text strings, TRUE/FALSE) or else R will convert each datum to be some universal type.\nbad.v \u0026lt;-c(0, \u0026quot;twelve\u0026quot;, TRUE) bad.v ## [1] \u0026quot;0\u0026quot; \u0026quot;twelve\u0026quot; \u0026quot;TRUE\u0026quot; Notice that now R sees all of these as text strings - you can tell by the \u0026quot;\u0026quot;.\nLet’s try another example:\nanother.bad.v \u0026lt;-c(0, TRUE, FALSE) another.bad.v ## [1] 0 1 0 In this case, R transformed the TRUE and FALSE values into 0 and 1. This is because it is forcing the data to be of the same class.\n 2-dimensional objects (matrices and dataframes) Most of the data that we’re used to looking at comes in the form of a table - the sort of data you would enter into a spreadsheet such that you have observations in rows and attributes of those observations in columns. Here’s an example of a 2D data-set that comes automatically with R - this is from the pre-loaded data-set called iris:\n# Ignore this for now: # Load in the pre-loaded iris dataset data('iris') head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa # Also demonstrate: # View(iris) Notice that when we use data() to load in the iris data-set, the Environment has a new entry, iris. We’ll talk about what the data() command is in a minute - for now, just look at how the data are put together:\n each column is a variable - ALL THE SAME TYPE! each row is an observation  data.frames can hold any type of data: numbers, text, or factors. Each column contains the same type of data.\nclass(iris) ## [1] \u0026quot;data.frame\u0026quot; Just like in 1-dimensional vectors, we can pull individual objects out of the iris data-set using matrix notation.\n# To pull out the object in row 1, column 1: ### Row first, then column iris[1,1] # Note the \u0026quot;,\u0026quot; separating the row ## [1] 5.1 # To pull out a single column, leave the row spot empty... iris[,1] ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 ## [18] 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 ## [35] 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 ## [52] 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 ## [69] 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 ## [86] 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 ## [103] 7.1 6.3 6.5 7.6 4.9 7.3 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 ## [120] 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 ## [137] 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9 #...or use its name with a \u0026quot;$\u0026quot; iris$Sepal.Length ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 ## [18] 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 ## [35] 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 ## [52] 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 ## [69] 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 ## [86] 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 ## [103] 7.1 6.3 6.5 7.6 4.9 7.3 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 ## [120] 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 ## [137] 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9 # To pull out a single row, leave the column spot empty: iris[1,] ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa # Don't forget that if you want to use a subset of the total data.frame later, you can save any of these as its own variable sep.length \u0026lt;-iris$Sepal.Length # Ask: any guesses about what type of object this will be? class(sep.length) ## [1] \u0026quot;numeric\u0026quot;   Modifying variables To modify numeric variables, you can re-save the variable with the same name…\nx \u0026lt;-5 x \u0026lt;-x+3 x ## [1] 8 …you can make the object larger by turning a single number into a list of numbers…\nx \u0026lt;-c(x,5,12,15) x ## [1] 8 5 12 15 …you can make the object smaller by removing datum…\nx \u0026lt;-x[-3] x ## [1] 8 5 15 …you can force R to read the object in a different way…\nas.data.frame(x) ## x ## 1 8 ## 2 5 ## 3 15 …and you can also change specific values within your data:\n# Ask the class \u0026quot;How do you think I could change the first value, 8, into 10?\u0026quot; x[1] \u0026lt;-10 x ## [1] 10 5 15 You can do the same with data.frames - you can add to the data.frame to make it larger…\n### It is a good idea to not overwrite the original data # Before manipulating iris, copy it iris.2 \u0026lt;-iris # By giving a new column name after a $, R creates a column called \u0026quot;new.column\u0026quot; to the iris data.frame iris.2$new.column \u0026lt;-0 head(iris.2) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species new.column ## 1 5.1 3.5 1.4 0.2 setosa 0 ## 2 4.9 3.0 1.4 0.2 setosa 0 ## 3 4.7 3.2 1.3 0.2 setosa 0 ## 4 4.6 3.1 1.5 0.2 setosa 0 ## 5 5.0 3.6 1.4 0.2 setosa 0 ## 6 5.4 3.9 1.7 0.4 setosa 0 # Notice that the column is filled up with \u0026quot;0\u0026quot;s …you can get rid of values within your data frame…\niris.2 \u0026lt;-iris.2[,-6] iris.2 \u0026lt;-iris.2[-151,] …and you can change values within the data.frame.\niris.2[1,\u0026quot;Sepal.Length\u0026quot;] \u0026lt;-100 # Or change it back to the original value in iris iris.2[1,\u0026quot;Sepal.Length\u0026quot;] \u0026lt;-iris[1,\u0026quot;Sepal.Length\u0026quot;] You can also create columns to reflect mathematical relationships between different objects. For example, instead of our empty new.column, which we got rid of above when we wrote iris.2[,-6], let’s make a new column with \u0026lt;- that is the ratio of sepal length to petal length.\niris.2$length.ratio \u0026lt;-iris.2$Sepal.Length/iris.2$Petal.Length head(iris.2) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species length.ratio ## 1 5.1 3.5 1.4 0.2 setosa 3.642857 ## 2 4.9 3.0 1.4 0.2 setosa 3.500000 ## 3 4.7 3.2 1.3 0.2 setosa 3.615385 ## 4 4.6 3.1 1.5 0.2 setosa 3.066667 ## 5 5.0 3.6 1.4 0.2 setosa 3.571429 ## 6 5.4 3.9 1.7 0.4 setosa 3.176471 summary(iris.2$length.ratio) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.050 1.230 1.411 2.018 3.176 4.833  Writing and reading files into/out of R Most of the time we’re working with R, we’re going to be reading in a dataset from, for example, a .csv file or an Excel file.\nBefore we dive into an example file set, let’s talk about functions…\nNow that we’ve made some changes to the iris data, we’d probably like to save these changes.\nThere are two ways to save data in R:\nSave all data in the environment as an .Rdata file Save as a different file type, typically a .csv  To save your entire R session with all of the objects in your environment:\n# Opens a dialogue that allows you to choose where to save save.image(\u0026quot;test.Rdata\u0026quot;) We can now open this data-set and return to it any time we like - we don’t have to run the same commands above. To do this, we simply load() the .R data file into our new R session.\nload(\u0026quot;test.Rdata\u0026quot;) We can also save our modified iris data file as a csv, a common data type that is standard across multiple computers and statistical software.\n# Data source first, then file name write.csv(iris.2, \u0026quot;iris2.csv\u0026quot;, row.names=F) Similar to load(), we can also read csv files (and many, many other file types) into R:\n##### Mention that there are other file formats - including Excel spreadsheets, txt files iris2 \u0026lt;-read.csv(\u0026quot;iris2.csv\u0026quot;) head(iris2) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species length.ratio ## 1 5.1 3.5 1.4 0.2 setosa 3.642857 ## 2 4.9 3.0 1.4 0.2 setosa 3.500000 ## 3 4.7 3.2 1.3 0.2 setosa 3.615385 ## 4 4.6 3.1 1.5 0.2 setosa 3.066667 ## 5 5.0 3.6 1.4 0.2 setosa 3.571429 ## 6 5.4 3.9 1.7 0.4 setosa 3.176471 # iris.2==iris2  Any time you have pre-existing data you want to use in R, you will probably end up using read.csv() or something similar. Most of the time we are interested in modifying and using our own data, not just the data already provided for us in R.\n Functions To summarize the last section, you can think of objects as collections of data. We can load existing data, modify those data, pull individual datum out of the object using names or numbered locations (like in matrix notation), and then save those changes.\nWe can use functions to modify, re-arrange, and do calculations on those data.\nFor example, if our data are numeric we can find mean values, sums, standard deviations, the range of values the data contain, etc.\nThe “stuff” that we can do with R’s objects are contained in functions. For example, the mean() function calculates the mean value from a series of numbers. So going back to our v vector, we could write out by hand how to calculate the mean:\nmean.of.v \u0026lt;-(v[1] +v[2] +v[3] +v[4] +v[5])/5 mean.of.v ## One ## 4 This is easier with functions:\nmean.of.v.easier \u0026lt;-sum(v)/length(v) mean.of.v.easiest \u0026lt;-mean(v) Functions are simply pre-written code chunks that take inputs, which we call Arguments.\nFor example, when we used the mean(v) command, we told R to calculate the mean value of the data contained in the vector v.\nYou can learn more about functions by looking at their help files with ?mean() or by searching for the function name in lower right panel.\n?mean() # From the help file: mean(x, ...) ## Default S3 method: mean(x, trim = 0, na.rm = FALSE, ...) In the same way, we used a function called data() to load the iris data-set. data('iris') tells R that we want to load up a data-set with the name ‘iris’.\n Reading and writing data You can view summary statistics with the following commands: - head(iris) - see the top 6 rows of your data - summary(iris) - view summary statistics for the data - View(iris) - open the data.frame in another tab in RStudio\nBefore working with a data set, it’s a good idea to examine it.\nHere are a few ways you can examine objects in R, whether they be variables, vectors, data frames, or matrices.\nhead(v) ## One Two Three Four Five ## 0 3 5 10 2 head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa # View(iris) summary(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ##   R’s true power: plotting and statistics Now that we know what iris looks like, let’s use these data to make some figures and perform some simple statistics.\nThere are many ways to create plots - check out the R Base Graphics Cheatsheet for a full list of the types of plots that can be made with R.\nHistograms Let’s start with something simple - a histogram of Sepal.Length?\nWe need to first tell R where to find the data we want to plot - we want to tell R that it can find a column of data called Sepal.Length inside of the iris data-frame. Take a minute to recall how we can do this - how do we tell R where to find our Sepal.Length data?\n# There are two ways we can do this ## Because the iris data has columns with names, we can use the name of the column we want iris$Sepal.Length ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 ## [18] 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 ## [35] 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 ## [52] 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 ## [69] 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 ## [86] 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 ## [103] 7.1 6.3 6.5 7.6 4.9 7.3 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 ## [120] 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 ## [137] 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9 ## We can always use numbers-based indexing as well iris[,1] ## [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 ## [18] 5.1 5.7 5.1 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 ## [35] 4.9 5.0 5.5 4.9 4.4 5.1 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 ## [52] 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 ## [69] 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7 5.5 5.5 5.8 6.0 5.4 ## [86] 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7 6.3 5.8 ## [103] 7.1 6.3 6.5 7.6 4.9 7.3 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 ## [120] 6.0 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 ## [137] 6.3 6.4 6.0 6.9 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9 # To make the plot: hist(iris$Sepal.Length) Easy, wasn’t it? But it isn’t very pretty - what could we change?\nWhen we make modifications to our plot, we pass extra arguments. In the original command, hist(iris$Sepal.Length), the only argument we gave it was the data to plot.\nTake a look at what other arguments are available with ?hist():\n?hist() # Change the title, NOTICETHAT WE USE COMMAS AND ARGUMENT NAMES!!! hist(x = iris$Sepal.Length, main = \u0026quot;Observed frequency of sepal length\u0026quot;) hist(x = iris$Sepal.Length, main = \u0026quot;Observed frequency of sepal length\u0026quot;, breaks = 20) hist(iris$Sepal.Length, main = \u0026quot;Observed frequency of sepal length\u0026quot;, breaks = 20, xlab = \u0026quot;Sepal Length (cm)\u0026quot;)  Scatterplot What about a more complicated type of plot next?\nLet’s try an x-y/scatter plot:\n?plot() plot(x = iris$Sepal.Length, y = iris$Petal.Length) Take five minutes to change the main title and the X and Y axes’ titles.\n# Output should look something like this plot(x = iris$Sepal.Length, y = iris$Petal.Length, main = \u0026quot;Iris sepal and petal dimensions\u0026quot;, ylab = \u0026quot;Petal length (cm)\u0026quot;, xlab = \u0026quot;Sepal length (cm)\u0026quot;) We can also goof around with colors and point types:\nplot(x = iris$Sepal.Length, y = iris$Petal.Length, main = \u0026quot;Iris sepal and petal dimensions\u0026quot;, ylab = \u0026quot;Petal length (cm)\u0026quot;, xlab = \u0026quot;Sepal length (cm)\u0026quot;, col = iris$Species) # pch = 19) # And we can add a legend: legend(x = 4.2, y = 7, legend = unique(iris$Species), fill = c('black','red','green'))  Saving plots Plots that you create in R can be saved in one of two ways:\nSaving in the Plots tab in the lower right panel Saving directly in the code - most useful if you’re going to be recreating the plots a bunch  Here’s how you save the image with code:\n# Saving plots with code: ## For example, to save a .png: png(\u0026quot;iris_scatterplot.png\u0026quot;) plot(x = iris$Sepal.Length, y = iris$Petal.Length, main = \u0026quot;Iris sepal and petal dimensions\u0026quot;, ylab = \u0026quot;Petal length (cm)\u0026quot;, xlab = \u0026quot;Sepal length (cm)\u0026quot;, col = iris$Species, pch = 19) dev.off() ## png ## 2 This uses two new functions:\n png() tells R to prepare a .png file with the name you provide then, running iris.scatterplot prints out the plot within that file finally, dev.off() closes the file and saves it  You can also save to other formats:\npdf(\u0026quot;iris_scatterplot.pdf\u0026quot;) plot(x = iris$Sepal.Length, y = iris$Petal.Length, main = \u0026quot;Iris sepal and petal dimensions\u0026quot;, ylab = \u0026quot;Petal length (cm)\u0026quot;, xlab = \u0026quot;Sepal length (cm)\u0026quot;, col = iris$Species, pch = 19) dev.off() ## png ## 2 # Or pass arguments about the plot itself, like the size, resolution, etc. png(\u0026quot;iris_scatterplot_smaller.png\u0026quot;, width = 200, height = 200) plot(x = iris$Sepal.Length, y = iris$Petal.Length, main = \u0026quot;Iris sepal and petal dimensions\u0026quot;, ylab = \u0026quot;Petal length (cm)\u0026quot;, xlab = \u0026quot;Sepal length (cm)\u0026quot;, col = iris$Species, pch = 19) dev.off() ## png ## 2 Here’s another type of plot - try to make this one on your own.\n?boxplot() boxplot(iris$Sepal.Length~iris$Species, fill=iris$Species, main = \u0026quot;Boxplot of sepal length by species\u0026quot;, ylab = \u0026quot;Sepal length (cm)\u0026quot;, xlab = \u0026quot;Species\u0026quot; )  Intro to statistics - linear regression The final thing that R is particularly good at besides plotting data performing statistics on those data.\nLet’s start with something really simple - what if we want to know how correlated sepal length and petal length are in these three species of iris? This is also useful for overlaying a line on top of our scatterplot.\nThe tool that we want is called linear regression using a new function, lm().\nlm() stands for linear model - this function fits a linear regression between two variables. Essentially, linear regression is used to calculate how closely correlated one variable is to another.\nThe linear part refers to the fact that we are calculating a straight-line relationship between these two, just like in the classic linear equation: \\[ y = mx+b\\]\nIf our \\(x\\) is sepal length and our \\(y\\) is petal length, we want to create an equation that we can use to predict petal length based on some observed sepal length.\nIn other words, we’re asking “when observed sepal length increases, how much of an increase in petal length should we expect?” We probably also want to know if there is a statistically significant relationship between the two, or if the trend we see in this plot could arise from random noise in our data.\nLinear regression finds the values for \\(m\\), the slope of the relationship, and \\(b\\), the y-intercept of the line, that best predict petal length from sepal length.\nWe’re not going to go too much further into the statistical basis for this, so let’s just dive into the code.\n# Regress petal length against sepal length ?lm() # lm() looks for a formula; in other words, we need to provide an equation for what variables we expect to be dependent on the other.  # In this case, let's assume that we are testing the petal length as a function of sepal length.  # NOTE: new argument, data =, allows us to use just the variable names directly linear.model \u0026lt;-lm(Petal.Length~Sepal.Length, data = iris) summary(linear.model) ## ## Call: ## lm(formula = Petal.Length ~ Sepal.Length, data = iris) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.47747 -0.59072 -0.00668 0.60484 2.49512 ## ## Coefficients: ## Estimate Std. Error t value Pr(\u0026gt;|t|) ## (Intercept) -7.10144 0.50666 -14.02 \u0026lt;2e-16 *** ## Sepal.Length 1.85843 0.08586 21.65 \u0026lt;2e-16 *** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## Residual standard error: 0.8678 on 148 degrees of freedom ## Multiple R-squared: 0.76, Adjusted R-squared: 0.7583 ## F-statistic: 468.6 on 1 and 148 DF, p-value: \u0026lt; 2.2e-16 Using the summary() command, R will spit out a bunch of information about the results of our linear regression.\nFor example, the coefficient for Sepal.Length is 1.85843 - this is the \\(m\\) value in our classical linear equation. Meanwhile, the estimate for our y-intercept is -7.10144. Putting these into our equation, we can say that the best linear equation to describe the relationship between petal length and sepal length is:\n\\[ Petal.Length = 1.85843*Sepal.Length -7.10144 \\] Now that we have this line, we can put it on top of our scatter plot!\n# the abline() function can be used to directly put linear model objects onto a plot plot(x = iris$Sepal.Length, y = iris$Petal.Length, main = \u0026quot;Iris sepal and petal dimensions\u0026quot;, ylab = \u0026quot;Petal length (cm)\u0026quot;, xlab = \u0026quot;Sepal length (cm)\u0026quot;, col = iris$Species)# , #pch = 19) abline(linear.model) legend(x = 4.2, y = 7, legend = unique(iris$Species), fill = c('black','red','green'))        // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.header').parent('thead').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); });   (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();    "
},
{
	"uri": "/teaching/conservation/rtuts/biol416_tutorial5_bef_instructions/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " BIOL 416 R Tutorial 5 - Biodiversity-ecosystem function in plant communities        h1 { font-size: 34px; } h1.title { font-size: 38px; } h2 { font-size: 30px; } h3 { font-size: 24px; } h4 { font-size: 18px; } h5 { font-size: 16px; } h6 { font-size: 12px; } .table th:not([align]) { text-align: left; }    .main-container { max-width: 940px; margin-left: auto; margin-right: auto; } code { color: inherit; background-color: rgba(0, 0, 0, 0.04); } img { max-width:100%; height: auto; } .tabbed-pane { padding-top: 12px; } .html-widget { margin-bottom: 20px; } button.code-folding-btn:focus { outline: none; } summary { display: list-item; }  .tabset-dropdown  .nav-tabs { display: inline-table; max-height: 500px; min-height: 44px; overflow-y: auto; background: white; border: 1px solid #ddd; border-radius: 4px; } .tabset-dropdown  .nav-tabs  li.active:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li.active:before { content: \"\"; border: none; } .tabset-dropdown  .nav-tabs.nav-tabs-open:before { content: \"\"; font-family: 'Glyphicons Halflings'; display: inline-block; padding: 10px; border-right: 1px solid #ddd; } .tabset-dropdown  .nav-tabs  li.active { display: block; } .tabset-dropdown  .nav-tabs  li  a, .tabset-dropdown  .nav-tabs  li  a:focus, .tabset-dropdown  .nav-tabs  li  a:hover { border: none; display: inline-block; border-radius: 4px; } .tabset-dropdown  .nav-tabs.nav-tabs-open  li { display: block; float: none; } .tabset-dropdown  .nav-tabs  li { display: none; }   $(document).ready(function () { window.buildTabsets(\"TOC\"); }); $(document).ready(function () { $('.tabset-dropdown  .nav-tabs  li').click(function () { $(this).parent().toggleClass('nav-tabs-open') }); });   $(document).ready(function () { // move toc-ignore selectors from section div to header $('div.section.toc-ignore') .removeClass('toc-ignore') .children('h1,h2,h3,h4,h5').addClass('toc-ignore'); // establish options var options = { selectors: \"h1,h2,h3\", theme: \"bootstrap3\", context: '.toc-content', hashGenerator: function (text) { return text.replace(/[.\\\\/?\u0026!#]/g, '').replace(/\\s/g, '_').toLowerCase(); }, ignoreSelector: \".toc-ignore\", scrollTo: 0 }; options.showAndHide = true; options.smoothScroll = true; // tocify var toc = $(\"#TOC\").tocify(options).data(\"toc-tocify\"); });  #TOC { margin: 25px 0px 20px 0px; } @media (max-width: 768px) { #TOC { position: relative; width: 100%; } } .toc-content { padding-left: 30px; padding-right: 40px; } div.main-container { max-width: 1200px; } div.tocify { width: 20%; max-width: 260px; max-height: 85%; } @media (min-width: 768px) and (max-width: 991px) { div.tocify { width: 25%; } } @media (max-width: 767px) { div.tocify { width: 100%; max-width: none; } } .tocify ul, .tocify li { line-height: 20px; } .tocify-subheader .tocify-item { font-size: 0.90em; padding-left: 25px; text-indent: 0; } .tocify .list-group-item { border-radius: 0px; }    BIOL 416 R Tutorial 5 - Biodiversity-ecosystem function in plant communities Mairin Deith  The purpose of this tutorial is to investigate how the species richness of plant communities influences the biomass produced by those communities.\nWe will be working a dataset that includes observations on the species richness and above-ground biomass production of study plots of plant communities. The data used in this analysis is contained in the csv file BIOL416_Tutorial5_BEFData.csv, which can be downloaded off of Canvas in the Tutorial 5 folder or at this link.\nTry to follow these steps on your own first, but don’t worry if you get stuck. We will go through the analysis together as a class, step-by-step, after you have a chance to try each stage of analysis.\nInstructions Load in the BEF data and review its structure Start up a new R script and load the .csv file into your R session - you can do this using the file.choose() function we have used previously, or by using file paths in your R script. Click here for more information on using file paths in R.\n Examine the BEF data. What data are represented in columns? In rows? What data populates the data frame?\n   BEF analysis: overview We want to find out if there is a significant relationship between species richness (SR) and biomass production (B) in these plant communities. To test for statistical significant, we will conduct two linear regressions between SR and B: one in which SR is transformed by the natural logarithm, ln, and another where SR is in its raw state.\nTo do this, we will:\nCalculate richness and mean biomass in each community Run a linear regression of both: \\[Biomass \\sim m * Richness + b\\] \\[Biomass \\sim m * ln(Richness) + b\\] …where \\(m\\) is the coefficient/slope for \\(Richness\\) and \\(b\\) is the y-intercept of the linear regression.\n Interpret and plot the results of (b)\n  Question: Why are we interested in comparing ln-transformed and un-transformed species richness data?\n BEF analysis: Step-by-step Start with just one plot, X2. Create a data frame that includes only observations for plot X2.  Hint: take a look at the subset() function if you’re stuck.\nCalculate the species richness in the X2 plot. SR changes year-per-year in some plots; only calculate SR for the first year of observations!\n Calculate the average biomass production (averaged across all years of observation) in X2.\n Repeat steps 1-3 for the remaining plots.\n  Hint: You should not do this by hand! we can use a for() loop for this. If you don’t know what a for-loop is, stop here - we will review this as a class. If you’re feeling ambitious, you can read about how to write a for-loop here.\nDon’t forget to store your results somewhere! Make a data frame of your BEF values including the Plot ID, species richness, and biomass production for each plot. It is easiest to do this before you run the loop in Step 4.\n Create and run a linear model that looks at:\nBiomass as a function of species richness \\[Biomass \\sim m * Richness + b\\]\n Biomass as a function of ln-transformed species richness. Hint: in R, log(X) takes the natural logarithm of some object, X. log10() is used to take the base-10 logarithm that you’re probably used to. \\[Biomass \\sim m * ln(Richness) + b\\]\n  Plot each of these relationships with a scatterplot and overlay the linear relationships created in Step 6 on the data.\n Interpret these relationships - what do the coefficients and intercepts tell us about species richness and how it influences biomass production?\n Compare the ability of the ln-transformed and untransformed species richness to predict biomass production.\n  Hint: you can do this by considering the Multiple R-squared result from the linear model objects created in Step 6; we will discuss what R-squared is in class if you are unfamiliar.\nWrite up your observations to answer the questions posted on Canvas in the Tutorial 5 - Biodiversity \u0026amp; Ecosystem Function folder.        // add bootstrap table styles to pandoc tables function bootstrapStylePandocTables() { $('tr.header').parent('thead').parent('table').addClass('table table-condensed'); } $(document).ready(function () { bootstrapStylePandocTables(); });   (function () { var script = document.createElement(\"script\"); script.type = \"text/javascript\"; script.src = \"https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"; document.getElementsByTagName(\"head\")[0].appendChild(script); })();    "
},
{
	"uri": "/about/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": "Hi there! I\u0026rsquo;m an early career researcher passionate about primates, programming, and protecting biodiversity. Currently a Zoology PhD candidate at the University of British Columbia, I dabble in everything from field work to simulation modelling to socioeconomic analysis.\nHere\u0026rsquo;s some background on my education and experiences:\n"
}]